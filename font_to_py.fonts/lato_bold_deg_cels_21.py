# Code generated by font-to-py.py.
# Font: Lato-Bold.ttf Char set: C°
version = '0.26'

def height():
    return 21

def max_width():
    return 19

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 63

def max_ch():
    return 176


def glyphs():
    for c in """?C°""":
        yield c, get_ch(c)

_font =\
b'\x0d\x00\x1f\x00\x7f\xc0\xff\xe0\x61\xe0\x00\xe0\x00\xe0\x00\xe0'\
b'\x01\xe0\x03\xc0\x0f\x80\x0e\x00\x0e\x00\x0e\x00\x0c\x00\x00\x00'\
b'\x00\x00\x00\x00\x0c\x00\x1e\x00\x1e\x00\x0c\x00\x13\x00\x01\xfc'\
b'\x00\x07\xff\x00\x1f\xff\xc0\x3f\x07\x80\x3c\x01\x00\x78\x00\x00'\
b'\x78\x00\x00\xf8\x00\x00\xf0\x00\x00\xf0\x00\x00\xf0\x00\x00\xf0'\
b'\x00\x00\xf0\x00\x00\xf8\x00\x00\x78\x00\x00\x7c\x00\x00\x3c\x01'\
b'\x00\x3f\x07\x80\x1f\xff\xc0\x07\xff\x00\x01\xfc\x00\x0c\x00\x1e'\
b'\x00\x3f\x00\x7f\x80\xf1\xc0\xe1\xc0\xe0\xc0\xe1\xc0\xe1\xc0\x7f'\
b'\x80\x3f\x00\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00'

_index =\
b'\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00'\
b'\x00\x00\x2c\x00\x2c\x00\x6d\x00\x00\x00\x2c\x00\x00\x00\x2c\x00'\
b'\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00'\
b'\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00'\
b'\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00'\
b'\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00'\
b'\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00'\
b'\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00'\
b'\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00'\
b'\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00'\
b'\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00'\
b'\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00'\
b'\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00'\
b'\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00'\
b'\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00'\
b'\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00'\
b'\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00'\
b'\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00'\
b'\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00'\
b'\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00'\
b'\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00'\
b'\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00'\
b'\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00'\
b'\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00'\
b'\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00'\
b'\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00'\
b'\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00'\
b'\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00\x00\x00\x2c\x00'\
b'\x00\x00\x2c\x00\x00\x00\x2c\x00\x6d\x00\x99\x00'

_mvfont = memoryview(_font)

def get_ch(ch):
    ordch = ord(ch)
    ordch = ordch + 1 if ordch >= 63 and ordch <= 176 else 63
    idx_offs = 4 * (ordch - 63)
    offset = int.from_bytes(_index[idx_offs : idx_offs + 2], 'little')
    next_offs = int.from_bytes(_index[idx_offs + 2 : idx_offs + 4], 'little')
    width = int.from_bytes(_font[offset:offset + 2], 'little')
    return _mvfont[offset + 2:next_offs], 21, width
 
